{"version":3,"sources":["components/FishTable.jsx","components/BugTable.jsx","components/CreatureTable.jsx","components/utilities/IconSelect.jsx","api/acnhapi.js","App.jsx","serviceWorker.js","index.js"],"names":["FishTable","fishData","className","src","image_uri","style","width","title","cellSpacing","name","availability","location","shadow","price","isAllDay","time","isAllYear","BugTable","bugData","CreatureTable","creatureData","Option","components","CustomSelectOption","props","CustomSelectValue","display","alignItems","data","icon","marginRight","label","IconSelect","options","onChange","SingleValue","baseInstance","axios","create","baseURL","baseInstanceArray","App","useState","allFish","setAllFish","allBugs","setAllBugs","allCreatures","setAllCreatures","setFishData","setBugData","setCreatureData","setDateString","formatData","values","map","value","icon_uri","formatForUS","length","datum","capitalize","str","i","x","split","toUpperCase","substr","join","date","Date","hour","getHours","mins","getMinutes","dString","Number","toDateString","fishId","then","listFish","formatted","bugId","listBugs","seaId","listSeaCreatures","margin","selected","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6b8be670.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst FishTable = ({fishData}) => {\r\n  return (\r\n    fishData &&\r\n    <div className=\"neuMorphismOut critterContainer\">\r\n        <div className=\"neuMorphismIn critterImageContainer\">\r\n          <img src={fishData.image_uri} style={{width: \"100%\"}} title={fishData[\"catch-phrase\"]}/>\r\n        </div>\r\n        <table className=\"critterTable pickerTable\"  cellSpacing=\"5\">\r\n          <tbody>\r\n            <tr>\r\n              <th>Name:</th>\r\n              <td>{fishData.name}</td>\r\n            </tr>\r\n            <tr>\r\n              <th>Location: </th>\r\n              <td>{fishData.availability.location} </td>\r\n            </tr>\r\n            <tr>\r\n              <th>Size:</th>\r\n              <td>{fishData.shadow}</td>\r\n            </tr>\r\n            <tr>\r\n              <th>Sell Price:</th>\r\n              <td>{fishData.price}</td>\r\n            </tr>\r\n            <tr>\r\n              <th>Times:</th>\r\n              <td>{fishData.availability.isAllDay ? \"All Day\" : fishData.availability.time}</td>\r\n            </tr>\r\n            <tr>\r\n              <th>Months:</th>\r\n              <td>{fishData.availability.isAllYear ? \"All Year\" : fishData.availability[\"month-northern\"]}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FishTable\r\n","import React from 'react';\r\n\r\nconst BugTable = ({bugData}) => {\r\n  return (\r\n    bugData &&\r\n    <div className=\"neuMorphismOut citterContainer\">\r\n        <div className=\"neuMorphismIn critterImageContainer\">\r\n          <img src={bugData.image_uri} style={{width: \"75%\"}} title={bugData[\"catch-phrase\"]}/>\r\n        </div>\r\n        <table className=\"critterTable pickerTable\"  cellSpacing=\"5\">\r\n          <tbody>\r\n            <tr>\r\n              <th>Name:</th>\r\n              <td>{bugData.name}</td>\r\n            </tr>\r\n            <tr>\r\n              <th>Location: </th>\r\n              <td>{bugData.availability.location} </td>\r\n            </tr>\r\n            <tr>\r\n              <th>Sell Price:</th>\r\n              <td>{bugData.price}</td>\r\n            </tr>\r\n            <tr>\r\n              <th>Times:</th>\r\n              <td>{bugData.availability.isAllDay ? \"All Day\" : bugData.availability.time}</td>\r\n            </tr>\r\n            <tr>\r\n              <th>Months:</th>\r\n              <td>{bugData.availability.isAllYear ? \"All Year\" : bugData.availability[\"month-northern\"]}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BugTable\r\n","import React from 'react';\r\n\r\nconst CreatureTable = ({creatureData}) => {\r\n  return (\r\n    creatureData &&\r\n    <div className=\"neuMorphismOut citterContainer\">\r\n        <div className=\"neuMorphismIn critterImageContainer\">\r\n          <img src={creatureData.image_uri} style={{width: \"75%\"}} title={creatureData[\"catch-phrase\"]}/>\r\n        </div>\r\n        <table className=\"critterTable pickerTable\"  cellSpacing=\"5\">\r\n          <tbody>\r\n            <tr>\r\n              <th>Name:</th>\r\n              <td>{creatureData.name}</td>\r\n            </tr>\r\n            <tr>\r\n              <th>Size:</th>\r\n              <td>{creatureData.shadow}</td>\r\n            </tr>\r\n            <tr>\r\n              <th>Sell Price:</th>\r\n              <td>{creatureData.price}</td>\r\n            </tr>\r\n            <tr>\r\n              <th>Times:</th>\r\n              <td>{creatureData.availability.isAllDay ? \"All Day\" : creatureData.availability.time}</td>\r\n            </tr>\r\n            <tr>\r\n              <th>Months:</th>\r\n              <td>{creatureData.availability.isAllYear ? \"All Year\" : creatureData.availability[\"month-northern\"]}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreatureTable\r\n","import React from \"react\"\r\nimport Select, { components } from 'react-select'\r\n\r\nconst { Option } = components\r\nconst CustomSelectOption = props => (\r\n  <Option {...props}>\r\n    <CustomSelectValue {...props} />\r\n  </Option>\r\n)\r\n\r\nconst CustomSelectValue = props => (\r\n  <div style={{display: \"flex\", alignItems: \"center\"}}>\r\n    <img src={props.data.icon} width={25} style={{marginRight: \"5px\"}}/>\r\n    <span>{props.data.label}</span>\r\n  </div>\r\n)\r\n\r\nconst IconSelect = ({options, onChange}) => \r\n<Select\r\n  onChange={onChange}\r\n  options={options}\r\n  className={\"Selector neuMorphismOut\"}\r\n  components={{ Option: CustomSelectOption, SingleValue: CustomSelectValue }}\r\n/>\r\n\r\nexport default IconSelect","import axios from \"axios\";\r\n\r\nconst baseInstance = axios.create({\r\n  baseURL: 'https://acnhapi.com/v1/',\r\n});\r\n\r\nconst baseInstanceArray = axios.create({\r\n  baseURL: 'https://acnhapi.com/v1a/',\r\n});\r\n\r\nexport function listFish(fishId = \"\"){ \r\n  return fishId == \"\" ?\r\n  baseInstanceArray(\"fish/\").then(({data}) => data) :\r\n  baseInstance(\"fish/\" + fishId).then(({data}) => data); \r\n}\r\nexport function listBugs(bugId = \"\"){ \r\n  return bugId == \"\" ?\r\n  baseInstanceArray(\"bugs/\").then(({data}) => data) :\r\n  baseInstance(\"bugs/\" + bugId).then(({data}) => data); \r\n}\r\nexport function listSeaCreatures(seaId = \"\"){ \r\n  return seaId == \"\" ?\r\n  baseInstanceArray(\"sea/\").then(({data}) => data) :\r\n  baseInstance(\"sea/\" + seaId).then(({data}) => data); \r\n}","import React, { useState, useMemo } from 'react';\r\nimport './App.scss';\r\nimport Select from 'react-select';\r\nimport * as R from 'ramda';\r\nimport FishTable from \"./components/FishTable\"\r\nimport BugTable from \"./components/BugTable\"\r\nimport CreatureTable from \"./components/CreatureTable\"\r\nimport SuggestionTable from './components/SuggestionTable';\r\nimport IconSelect from './components/utilities/IconSelect'\r\nimport { listFish, listBugs, listSeaCreatures } from './api/acnhapi';\r\n\r\nconst App = () => {\r\n  const [allFish, setAllFish] = useState([]);\r\n  const [allBugs, setAllBugs] = useState([]);\r\n  const [allCreatures, setAllCreatures] = useState([]);\r\n  const [fishData, setFishData] = useState(null);\r\n  const [bugData, setBugData] = useState(null);\r\n  const [creatureData, setCreatureData] = useState(null)\r\n  const [dateString, setDateString] = useState(\"The current date/time\");\r\n\r\n  const formatData = (values) => {\r\n    return values.map(value => {\r\n      return {value: value, label: value.name, icon: value.icon_uri}\r\n    })\r\n  }\r\n\r\n  const formatForUS = (data) => {\r\n    return data.length && data.length > 0 ?\r\n      data.map(datum => {\r\n        return {...datum, name: capitalize(datum.name[\"name-USen\"])}\r\n      })\r\n      :\r\n      {...data, name: capitalize(data.name[\"name-USen\"])}\r\n  }\r\n\r\n  const capitalize = (str) => {\r\n    if(str){\r\n      str = str.split(\" \");\r\n      for (var i = 0, x = str.length; i < x; i++) {\r\n          str[i] = str[i][0].toUpperCase() + str[i].substr(1);\r\n      }\r\n      return str.join(\" \");\r\n    }\r\n  }\r\n\r\n  useState(() => {\r\n    const date = new Date()\r\n    const hour = date.getHours();\r\n    const mins = date.getMinutes();\r\n    const dString = hour + \":\" + (Number(mins) < 10 ? \"0\" + mins : mins) + \", \" + date.toDateString();\r\n    setDateString(dString)\r\n    listFish().then(data => {\r\n      const formatted = formatForUS(data);\r\n      setAllFish(formatted);\r\n      setFishData(formatted[0]);\r\n    });\r\n    listBugs().then(data => {\r\n      const formatted = formatForUS(data);\r\n      setAllBugs(formatted);\r\n      setBugData(formatted[0]);\r\n    });\r\n    listSeaCreatures().then(data => {\r\n      const formatted = formatForUS(data);\r\n      setAllCreatures(formatted);\r\n      setCreatureData(formatted[0]);\r\n    });\r\n  },[])\r\n\r\n  return (\r\n    <>\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <div className=\"TitleBox neuMorphismOut\">\r\n            <h3 style={{margin: \"0px\"}}>ACNH Critter Data</h3>\r\n          </div>\r\n        </header>\r\n        <div className=\"App-Body\">\r\n          {allBugs.length > 0 &&\r\n            <div className=\"critterSection\">\r\n              <h3>Bugs</h3>\r\n                <IconSelect \r\n                  options={formatData(allBugs)}\r\n                  onChange={selected => setBugData(selected.value)}\r\n                />\r\n                <BugTable bugData={bugData} />\r\n            </div>\r\n          }\r\n          {allFish.length > 0 &&\r\n            <div className=\"critterSection\">\r\n              <h3>Fish</h3>\r\n                <IconSelect \r\n                  options={formatData(allFish)}\r\n                  onChange={selected => setFishData(selected.value)}\r\n                />\r\n                <FishTable fishData={fishData} />\r\n            </div>\r\n          }\r\n          {allCreatures.length > 0 &&\r\n            <div className=\"critterSection\">\r\n              <h3>Sea Creatures</h3>\r\n                <IconSelect \r\n                  options={formatData(allCreatures)}\r\n                  onChange={selected => setCreatureData(selected.value)}\r\n                />\r\n                <CreatureTable creatureData={creatureData} />\r\n            </div>\r\n          }\r\n        </div>\r\n\r\n        {/* <div className=\"App-Body\">\r\n          <div className=\"critterSection\">\r\n            <h3>Bugs</h3>\r\n            <Select \r\n              options={formatData(ACNH_INSECTS)}\r\n              className=\"Selector\"\r\n              onChange={selected => setBugData(selected.value)}\r\n            />\r\n            <BugTable bugData={bugData}/>\r\n          </div>\r\n        </div>\r\n        <div className=\"App-Body\">\r\n          <div className=\"suggestionSection\">\r\n            <h3 style={{margin: \"0px\"}}>What To Look for Now:</h3>\r\n            <h3 style={{marginTop: \"0px\"}}>{dateString}</h3>\r\n            <SuggestionTable tableData={WHATTODO}/>\r\n          </div>\r\n        </div> */}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}